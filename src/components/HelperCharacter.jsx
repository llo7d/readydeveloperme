/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 helper.glb --transform 
Files: helper.glb [41.96MB] > D:\Code\readydeveloperme\public\helper-transformed.glb [10.2MB] (76%)
*/

import React, { useEffect, useState } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations, Html } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import * as THREE from 'three'

export default function HelperCharacter({ characterRef }) {
  const group = React.useRef()
  const [isNear, setIsNear] = useState(false)
  const { scene, animations } = useGLTF('/helperCharacter.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const { actions } = useAnimations(animations, group)

  // Set up the initial pose (4th pose) and stop animation
  useEffect(() => {
    if (!actions) return;
    
    const animationNames = Object.keys(actions)
    if (animationNames.length >= 4) {
      const fourthAnimation = animationNames[3]
      if (actions[fourthAnimation]) {
        const action = actions[fourthAnimation]
        action.reset()
        action.setEffectiveTimeScale(0)
        action.play()
        action.time = 0.5
      }
    }
  }, [actions])

  // Handle proximity detection
  useEffect(() => {
    if (!characterRef?.current || !group.current) return;
    
    const checkProximity = () => {
      const distance = characterRef.current.position.distanceTo(group.current.position)
      setIsNear(distance < 5)
    }
    
    // Check proximity every 100ms
    const interval = setInterval(checkProximity, 100)
    return () => clearInterval(interval)
  }, [characterRef])

  return (
    <group 
      ref={group} 
      dispose={null} 
      scale={0.14} 
      position={[-5.6, 0, 15]} 
      rotation={[0, Math.PI / 4, 0]}
    >
      {/* Badge above character */}
      <Html
        position={[0, 20, 0]}
        center
        style={{
          background: isNear ? '#37BA7E' : '#666',
          padding: '15px 25px',
          borderRadius: '10px',
          color: 'white',
          fontSize: '22px',
          fontWeight: '600',
          whiteSpace: 'nowrap',
          userSelect: 'none',
          fontFamily: 'system-ui, -apple-system, sans-serif',
          boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
          transition: 'all 0.3s ease',
          transform: isNear ? 'scale(1.1)' : 'scale(1)',
          cursor: isNear ? 'pointer' : 'default',
          pointerEvents: 'auto',
        }}
      >
        {isNear ? "Click me to talk" : "AI Helper"}
      </Html>
      
      {/* Character model */}
      <group name="Main">
        <group name="root">
          <primitive object={nodes.rootx} />
          <primitive object={nodes.HeadphoneRoot} />
          <primitive object={nodes.MacbookRoot} />
          {Object.entries(nodes).map(([key, node]) => {
            if (node.type === 'SkinnedMesh') {
              return (
                <skinnedMesh
                  key={key}
                  name={key}
                  geometry={node.geometry}
                  material={materials[node.material.name]}
                  skeleton={node.skeleton}
                  morphTargetDictionary={node.morphTargetDictionary}
                  morphTargetInfluences={node.morphTargetInfluences}
                  castShadow
                  receiveShadow
                  material-color={
                    (key === 'james_shirt_geo' || key === 'james_cap') 
                      ? isNear ? '#37BA7E' : '#666'
                      : undefined
                  }
                />
              )
            }
            return null
          })}
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/helperCharacter.glb')
